{"version":3,"sources":["webpack:///./ClientApp/$_lazy_route_resource lazy namespace object","webpack:///./ClientApp/app/app.component.css","webpack:///./ClientApp/app/app.component.html","webpack:///./ClientApp/app/app.component.ts","webpack:///./ClientApp/app/app.module.ts","webpack:///./ClientApp/app/manage/materialList.component.html","webpack:///./ClientApp/app/manage/materialList.component.ts","webpack:///./ClientApp/app/shared/dataService.ts","webpack:///./ClientApp/environments/environment.ts","webpack:///./ClientApp/main.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,kF;;;;;;;;;;;ACZA,mB;;;;;;;;;;;ACAA,8EAA8E,SAAS,4D;;;;;;;;;;;;;;;;;;;;;ACA7C;AAO1C;IALA;QAME,UAAK,GAAG,oBAAoB,CAAC;IAC/B,CAAC;IAFY,YAAY;QALxB,+DAAS,CAAC;YACT,QAAQ,EAAE,kBAAkB;;;SAG7B,CAAC;OACW,YAAY,CAExB;IAAD,mBAAC;CAAA;AAFwB;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPiC;AACjB;AACe;AAET;AACgB;AACZ;AAgBnD;IAAA;IAAyB,CAAC;IAAb,SAAS;QAdrB,8DAAQ,CAAC;YACN,YAAY,EAAE;gBACV,2DAAY;gBACZ,2EAAY;aACf;YACD,OAAO,EAAE;gBACL,uEAAa;gBACb,qEAAgB;aACnB;YACD,SAAS,EAAE;gBACP,+DAAW;aACd;YACD,SAAS,EAAE,CAAC,2DAAY,CAAC;SAC5B,CAAC;OACW,SAAS,CAAI;IAAD,gBAAC;CAAA;AAAJ;;;;;;;;;;;;ACtBtB,iGAAiG,UAAU,IAAI,iBAAiB,6B;;;;;;;;;;;;;;;;;;;;;;;;;ACA9E;AACE;AAOpD;IACI,sBAAoB,IAAiB;QAAjB,SAAI,GAAJ,IAAI,CAAa;QAG9B,cAAS,GAAG,EAAE,CAAC;IAFtB,CAAC;IAID,+BAAQ,GAAR;QAAA,iBAOC;QANG,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;aACpB,SAAS,CAAC,iBAAO;YACd,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;gBACV,KAAI,CAAC,SAAS,GAAG,KAAI,CAAC,IAAI,CAAC,SAAS,CAAC;YACzC,CAAC;YAAA,CAAC;QACN,CAAC,CAAC,CAAC;IACX,CAAC;IAbQ,YAAY;QALxB,+DAAS,CAAC;YACP,QAAQ,EAAE,eAAe;;YAEzB,SAAS,EAAE,EAAE;SAChB,CAAC;yCAE4B,+DAAW;OAD5B,YAAY,CAcxB;IAAD,mBAAC;CAAA;AAdwB;;;;;;;;;;;;;;;;;;;;;;;;;;;ACR0B;AACR;AACZ;AAG/B;IAEI,qBAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAE7B,cAAS,GAAG,EAAE,CAAC;IAFiB,CAAC;IAIxC,mCAAa,GAAb;QAAA,iBAMC;QALG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,eAAe,CAAC;aAChC,GAAG,CAAC,UAAC,IAAW;YACb,KAAI,CAAC,SAAS,GAAG,IAAI,CAAC;YACtB,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC,CAAC,CAAC;IACX,CAAC;IAZQ,WAAW;QADvB,gEAAU,EAAE;yCAGiB,+DAAU;OAF3B,WAAW,CAavB;IAAD,kBAAC;CAAA;AAbuB;;;;;;;;;;;;;;ACLxB;AAAA,gFAAgF;AAChF,2EAA2E;AAC3E,gEAAgE;AAEzD,IAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;GAKG;AACH,mEAAmE;;;;;;;;;;;;;;;;;;ACdpB;AAC4B;AAE9B;AACY;AAEzD,EAAE,CAAC,CAAC,qEAAW,CAAC,UAAU,CAAC,CAAC,CAAC;IAC3B,oEAAc,EAAE,CAAC;AACnB,CAAC;AAED,gGAAsB,EAAE,CAAC,eAAe,CAAC,yDAAS,CAAC;KAChD,KAAK,CAAC,aAAG,IAAI,cAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAhB,CAAgB,CAAC,CAAC","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./ClientApp/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"<div style=\\\"text-align:center\\\">\\n  <h1>\\n    Welcome to {{ title }}!\\n  </h1>\\n    <material-list></material-list>\\n</div>\\n\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'manage-component',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'Material List page';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AppComponent } from './app.component';\nimport { MaterialList } from './manage/materialList.component';\r\nimport { DataService } from './shared/dataService';\r\n\n@NgModule({\n    declarations: [\n        AppComponent,\n        MaterialList\n    ],\n    imports: [\n        BrowserModule,\n        HttpClientModule\n    ],\n    providers: [\n        DataService\n    ],\n    bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \"<div class=\\\"row\\\">\\r\\n    <ul>\\r\\n        <li *ngFor=\\\"let p of materials\\\">{{ p.name }}: {{ p.description }}</li>\\r\\n    </ul>\\r\\n</div>\"","﻿import { Component, OnInit } from \"@angular/core\"\r\nimport { DataService } from \"../shared/dataService\";\r\n\r\n@Component({\r\n    selector: \"material-list\",\r\n    templateUrl: \"materialList.component.html\",\r\n    styleUrls: []\r\n})\r\nexport class MaterialList implements OnInit {\r\n    constructor(private data: DataService) {\r\n    }\r\n\r\n    public materials = [];\r\n\r\n    ngOnInit(): void {\r\n        this.data.loadMaterials()\r\n            .subscribe(success => {\r\n                if (success) {\r\n                    this.materials = this.data.materials;\r\n                };\r\n            });\r\n    }\r\n}","﻿import { HttpClient } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport 'rxjs/add/operator/map';\r\n\r\n@Injectable()\r\nexport class DataService {\r\n\r\n    constructor(private http: HttpClient) {}\r\n\r\n    public materials = [];\r\n\r\n    loadMaterials() {\r\n        return this.http.get(\"api/materials\")\r\n            .map((data: any[]) => {\r\n                this.materials = data;\r\n                return true;\r\n            });\r\n    }\r\n}","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}